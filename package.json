{
    "name": "intval",
    "version": "1.1.4",
    "description": "Returns sensible integer value of a given variable. Unlike parseInt it will never return NaN and you can set a default value to be returned in case the variable is undefined! Hence you can write even cleaner code. So if it's supposed to be an integer, cast it with intval.",
    "main": "./src/index.js",
    "scripts": {
        "test": "node --experimental-vm-modules node_modules/jest/bin/jest.js",
        "build:types": "tsc"
    },
    "exports": {
        "import": {
            "types": "./types/wrapper.d.mts",
            "default": "./src/wrapper.mjs"
        },
        "require": {
            "types": "./types/index.d.ts",
            "default": "./src/index.js"
        },
        "types": "./types/*"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/kossidts/intval.git"
    },
    "homepage": "https://github.com/kossidts/intval#readme",
    "bugs": {
        "url": "https://github.com/kossidts/intval/issues"
    },
    "keywords": [
        "intval",
        "int val",
        "int value",
        "integer value",
        "int",
        "integer",
        "parseint",
        "parse int",
        "parse integer",
        "number",
        "numeric",
        "type",
        "typecast",
        "isnan",
        "is nan",
        "nan",
        "valueof"
    ],
    "type": "commonjs",
    "author": "Kossi D. T. Saka",
    "license": "MIT",
    "devDependencies": {
        "@types/jest": "^29.5.5",
        "jest": "^27.5.1",
        "typescript": "^5.2.2"
    },
    "jest": {
        "testMatch": [
            "**/test/**/*.test.js"
        ],
        "verbose": true,
        "transform": {}
    },
    "files": [
        "./src/index.js",
        "./src/wrapper.mjs",
        "./types/*"
    ]
}
